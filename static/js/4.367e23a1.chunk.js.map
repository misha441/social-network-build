{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","to","id","dialogUser","activeClassName","active","dialogsUserPhoto","src","photo","userPhoto","alt","name","Message","sender","authUserId","cn","messageWrapper","yourMessage","message","messageText","dangerouslySetInnerHTML","__html","dateFormattingToHours","addedAt","messageUserPhoto","authUserPhotos","small","selectedUserPhoto","maxLength100","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","dialogs__sendMessageForm","Field","component","Textarea","dialogs__textArea","validate","required","placeholder","dialogs__sendMessageFormButton","dialogs__tsendButton","Dialogs","messageScroll","React","createRef","state","dialogsPage","messageSendDate","useEffect","current","scrollTop","scrollHeight","clientHeight","messages","dateFunc","m","dateFormattingToDate","dialogDateStyle","dialogsElements","dialogs","map","d","userName","photos","large","messagesElements","body","senderId","dialogsItem","messagesBlockWrapper","isFetching","Preloader","selectedUserId","selectedUserInfo","selectedUserFullName","ref","messagesWrapper","sendingField","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","DialogsContainer","date","splittedTime","split","reverse","join","userId","this","match","params","getMessages","getFriends","refreshProfile","setSelectedUserId","setMessages","prevProps","prevState","snapshot","Component","compose","connect","pageSize","sendMessageCreator","RedirectComponent"],"mappings":"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","file":"static/js/4.367e23a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__z01l7\",\"dialogUser\":\"Dialogs_dialogUser__floW5\",\"active\":\"Dialogs_active__3HGsy\",\"dialogsUserPhoto\":\"Dialogs_dialogsUserPhoto__2ibkk\",\"dialogsItem\":\"Dialogs_dialogsItem__3MUqk\",\"dialog\":\"Dialogs_dialog__2EPxW\",\"messagesBlockWrapper\":\"Dialogs_messagesBlockWrapper__3LX8X\",\"selectedUserInfo\":\"Dialogs_selectedUserInfo__spwZP\",\"messagesWrapper\":\"Dialogs_messagesWrapper__3_1zv\",\"dialogDateStyle\":\"Dialogs_dialogDateStyle__1F5ZY\",\"massagesBlock\":\"Dialogs_massagesBlock__3W46A\",\"messageWrapper\":\"Dialogs_messageWrapper__2r02C\",\"message\":\"Dialogs_message__3y9CQ\",\"yourMessage\":\"Dialogs_yourMessage__1DN-z\",\"messageText\":\"Dialogs_messageText__EUK7N\",\"messageUserPhoto\":\"Dialogs_messageUserPhoto__1Wqn4\",\"sendingField\":\"Dialogs_sendingField__2YyZC\",\"dialogs__sendMessageForm\":\"Dialogs_dialogs__sendMessageForm__1i4Hw\",\"dialogs__sendMessageFormButton\":\"Dialogs_dialogs__sendMessageFormButton__8nsb5\",\"dialogs__textArea\":\"Dialogs_dialogs__textArea__1orQJ\",\"dialogs__tsendButton\":\"Dialogs_dialogs__tsendButton__3J2dG\",\"followBtn\":\"Dialogs_followBtn__2ohbZ\"};","import React from 'react';\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../../assets/photos/user_icon.png\";\r\n\r\nconst DialogItem = (props) => {\r\n    return(\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id} className={s.dialogUser}\r\n                     activeClassName={s.active}>\r\n                <div><img className={s.dialogsUserPhoto}\r\n                          src={props.photo != null ? props.photo : userPhoto} alt=\"\"/></div>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from \"./../Dialogs.module.css\";\r\nimport cn from 'classnames';\r\nimport userPhoto from \"../../../assets/photos/user_icon.png\";\r\n\r\nconst Message = (props) => {\r\n\r\n    return (<div>\r\n            {props.sender === props.authUserId\r\n                ? <div className={cn(s.messageWrapper, s.yourMessage)}>\r\n                    <div className={s.message}>\r\n                        <div className={s.messageText} dangerouslySetInnerHTML={{ __html: props.message}}></div>\r\n                        <span>{props.dateFormattingToHours(props.addedAt)}</span>\r\n                    </div>\r\n                    <div className={s.messageUserPhoto}>\r\n                        <img src={props.authUserPhotos.small ? props.authUserPhotos.small : userPhoto} alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                : <div className={s.messageWrapper}>\r\n                    <div className={s.messageUserPhoto}>\r\n                        <img src={props.selectedUserPhoto.small ? props.selectedUserPhoto.small : userPhoto} alt=\"\" />\r\n                    </div>\r\n                    <div className={s.message}>\r\n                        {props.message}\r\n                        <span>{props.dateFormattingToHours(props.addedAt)}</span>\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {useEffect, useState} from 'react';\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/formControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport cn from 'classnames';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../assets/photos/user_icon.png\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let messageScroll = React.createRef();\r\n    let state = props.dialogsPage;\r\n    let messageSendDate = '';\r\n\r\n    useEffect(() => {\r\n        messageScroll.current.scrollTop = messageScroll.current.scrollHeight - messageScroll.current.clientHeight;\r\n    }, [props.dialogsPage.messages]);\r\n\r\n    let onSendMessage = (values) => {\r\n        props.sendMessage(props.selectedUserId, values.newMessageBody);\r\n    }\r\n\r\n    let dateFunc = (m) => {\r\n        if(props.dateFormattingToDate(m.addedAt) !== messageSendDate){\r\n            messageSendDate = props.dateFormattingToDate(m.addedAt)\r\n            return <div className={s.dialogDateStyle}><span>{props.dateFormattingToDate(m.addedAt)}</span></div>\r\n        }\r\n    }\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id}\r\n                                                             name={d.userName}\r\n                                                             id={d.id}\r\n                                                             photo={d.photos.large}/>);\r\n    let messagesElements = state.messages.map(m => <>{\r\n        dateFunc(m)\r\n    }\r\n        <Message key={m.id}\r\n                 message={m.body}\r\n                 sender={m.senderId}\r\n                 selectedUserPhoto={props.selectedUserPhoto}\r\n                 authUserId={props.authUserId}\r\n                 authUserPhotos={props.authUserPhotos}\r\n                 dateFormattingToHours={props.dateFormattingToHours}\r\n                 addedAt={m.addedAt}/>\r\n    </>);\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={cn(s.dialogsItem, 'scrollbarStyle')}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messagesBlockWrapper}>\r\n                {props.isFetching ? <Preloader/> : null}\r\n                {props.selectedUserId\r\n                    ? <div className={cn(s.selectedUserInfo)}>\r\n                        <img src={props.selectedUserPhoto.small ? props.selectedUserPhoto.small : userPhoto} alt=\"\"/>\r\n                        <div>{props.selectedUserFullName}</div>\r\n                    </div>\r\n                    : <div className={cn(s.selectedUserInfo)}>\r\n                        <img src={userPhoto} alt=\"\"/>\r\n                    </div>}\r\n\r\n                <div ref={messageScroll} className={cn(s.messagesWrapper, 'scrollbarStyle')}>\r\n                    {messagesElements}\r\n                </div>\r\n                <div className={s.sendingField}>\r\n\r\n                    <AddMessageReduxForm onSubmit={onSendMessage}/>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.dialogs__sendMessageForm}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageBody'} className={s.dialogs__textArea}\r\n                       validate={[required, maxLength100]} placeholder={'Enter new message'}/>\r\n            </div>\r\n            <div className={s.dialogs__sendMessageFormButton}>\r\n                <button className={s.dialogs__tsendButton}>SEND</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {\r\n    getFriends,\r\n    getMessages,\r\n    sendMessage,\r\n    sendMessageCreator,\r\n    setMessages,\r\n    setSelectedUserId\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass DialogsContainer extends React.Component{\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.match.params.userId;\r\n        if(userId) {\r\n            this.props.getMessages(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getFriends()\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.setSelectedUserId(null)\r\n        this.props.setMessages([])\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    dateFormattingToHours = (date) => {\r\n        const splittedTime = date.split('T')[1].split(':')\r\n        return splittedTime[0]+':'+splittedTime[1]\r\n    }\r\n    dateFormattingToDate = (date) => {\r\n        return date.split('T')[0].split('-').reverse().join('.')\r\n    }\r\n\r\n    render(){\r\n        return <Dialogs {...this.props} dateFormattingToHours={this.dateFormattingToHours}\r\n                        dateFormattingToDate={this.dateFormattingToDate} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        pageSize: state.dialogsPage.pageSize,\r\n        selectedUserId: state.dialogsPage.selectedUserId,\r\n        selectedUserPhoto: state.dialogsPage.selectedUserPhoto,\r\n        selectedUserFullName: state.dialogsPage.selectedUserFullName,\r\n        authUserId: state.auth.id,\r\n        authUserPhotos: state.auth.photos,\r\n        isFetching: state.dialogsPage.isFetching\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {sendMessageCreator, getFriends,\r\n        getMessages, sendMessage, setSelectedUserId, setMessages}),\r\n    withAuthRedirect\r\n)(DialogsContainer);"],"sourceRoot":""}